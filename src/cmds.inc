DEF_CMD(HLT, halt = true;)
DEF_CMD(ADD, POP(val1) POP(val2) PUSH(val1 + val2))
DEF_CMD(SUB, POP(val1) POP(val2) PUSH(val1 - val2))
DEF_CMD(MUL, POP(val1) POP(val2) PUSH(val1 * val2))
DEF_CMD(DIV, POP(val1) POP(val2) PUSH(val2 / val1))
DEF_CMD(DUP, POP(val1) PUSH(val1) PUSH(val1))
DEF_CMD(OUT, POP(val1) printf("%lg\n", val1);)
DEF_CMD(RET, POP(val1) ip = (size_t) val1;)
DEF_CMD(IN, printf(" $ "); scanf("%lf", &val1); PUSH(val1))
DEF_CMD(SQRT, POP(val1) val1 = sqrt(val1); PUSH(val1))
DEF_CMD(SIN, POP(val1) PUSH(sin(val1)))
DEF_CMD(COS, POP(val1) PUSH(cos(val1)))
DEF_CMD(PON, POP(val1) POP(val2)
                vram[((int) val2-1)*RESOL_X + ((int) val1 - 1)] = 1;
        )
DEF_CMD(CLN, memset(vram, 0, sizeof(int)*RESOL_X*RESOL_Y);)
DEF_CMD(PIC, draw_vram(vram);)
DEF_CMD(DMP, cpu_dump(cmd_buf, size, ip);)

DEF_JMP(CALL, PUSH((double) ip+1) ip = (size_t) cmd_buf[ip];)
DEF_JMP(JMP, ip = (size_t) cmd_buf[ip];)
DEF_JMP(JA, POP(val1) POP(val2) if (val1 > val2) ip = (size_t) cmd_buf[ip]; else ip++;)
DEF_JMP(JB, POP(val1) POP(val2) if (val1 < val2) ip = (size_t) cmd_buf[ip]; else ip++;)
DEF_JMP(JE, POP(val1) POP(val2) if (are_equal(val1, val2)) ip = (size_t) cmd_buf[ip]; else ip++;)
DEF_JMP(JAE, POP(val1) POP(val2) if (val1 >= val2) ip = (size_t) cmd_buf[ip]; else ip++;)
DEF_JMP(JBE, POP(val1) POP(val2) if (val1 <= val2) ip = (size_t) cmd_buf[ip]; else ip++;)
DEF_JMP(JNE, POP(val1) POP(val2) if (!are_equal(val1, val2)) ip = (size_t) cmd_buf[ip]; else ip++;)
